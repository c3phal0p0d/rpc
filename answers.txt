Name: Natasha Chiorsac
Login ID: nchiorsac
Student ID: 1145264

--------------------

ANSWERS TO QUESTIONS
1. Should the server accept calls from everyone, or just a subset of users?
In general it would be best to restrict server calls to a subset of users in order to prevent it from being overloaded or misused. 
If the server does accept calls from everyone, it would need to somehow restrict the number of calls that can be made per user in order to prevent the theoretical possibility of spam/denial of service attacks.
However, this would ultimately depend on the purpose of the server and the kinds of functions it has registered.

2. Should authentication etc. be provided by the RPC framework, or by the functions that use the RPC framework?
If the server is restricted to a subset of users then the RPC framework would obviously require authentication to prevent other people from using it.
If not, authentication for certain functions that require it should be provided by the functions themselves, since authentication may only be necessary for specific kinds of functions (e.g. accessing files with restricted permissions)

3. What transport layer protocol should be used? What are the trade-offs?
Out of the two transport layer protocols TCP and UDP, TCP should be used for the RPC system. 
This is because it establishes a reliable connection and deals with packet loss, which is very important for the RPC system where each packet contains important information.
In contrast, UDP does not particularly care whether packets are lost thus making it more unreliable.

4. In which function(s) should the socket(s) be created?
The sockets should be created in rpc_init_server and rpc_init_client as part of the initialization process, and then later used on the server side by rpc_serve_all and on the client side by rpc_find and rpc_call.

5. Should rpc_client and rpc_server be allocated dynamically or statically? What are the implications for the client and server code?
They should be allocated dynamically, and therefore ideally their memory must be correspondingly freed in the client and server code.

6. What happens if one host uses big-endian byte order and the other uses little-endian? How does that relate to “network byte order”?
Network byte order is big-endian. If a host uses little-endian byte order, it must first be converted to big-endian before being transmitted over the network.

--------------------

PROTOCOL DESIGN
Structure of protocol messages:
- Each protocol request has a request_id, which is an integer corresponding to that particular request. It is used to ensure that responses from the server correspond correctly to the client's request.
    - Client request: request_id FIND name
    - Server response: 
        - If found: request_id OK function_id
        - If not found: request_id ER
    - Client confirmation upon receiving server response: request_id RECV
- CALL: Call function on server, returning its result
    - Client request: request_id CALL function_id data1 data2_len data2 (using value from input rpc_data struct)
    - Server response: 
        - If function is called without errors: request_id OK data1 data2_len data2 (using value from output rpc_data struct)
        - If error occurs: request_id ER 
    - Client confirmation upon receiving server response: request_id RECV

Error handling:
- Invalid inputs:
    - Check for data2_len and the actual length of data2 being the same
- Lost packets:
    - As described above, three messages are sent per successful request, so if one of them is missing it will indicate the loss of a packet
    - Timer of 5s on client-side for receiving response message from server, and similar timer on server-side for receiving confirmation message from client
    - If message is not received before timeout, then the previous message will be sent again
- Packet duplication:
    - Server and client will keep a record of what messages belonging to a particular request have been received so far
    - If a duplicate message arrives, it will therefore be detected as a copy of a message that has already been received
- Errors relating to protocol requests FIND and CALL:
    - As described above, a message of the form request_id ER will be sent if issues arise when finding/calling functions on the server